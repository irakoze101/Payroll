@page "/new-employee"
@page "/edit-employee/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Payroll.Shared.DTO
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Id.HasValue)
{
    <h3>Edit Employee</h3>
}
else
{
    <h3>New Employee</h3>
}

@if (EditModel != null)
{
<EmployeeForm Employee="@EditModel" OnCancel="@OnCancel" OnSave="@OnSave"/>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private EmployeeDto? EditModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            try
            {
                EditModel = await Http.GetFromJsonAsync<EmployeeDto>($"api/Employees/{Id.Value}");
            }
            catch (Exception e)
            {
                Console.WriteLine($"Failed to fetch employee {Id.Value}: {e.Message}");
            }
        }
        else
        {
            EditModel = new EmployeeDto();
        }
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/edit-employees");
    }

    private async Task OnSave(EmployeeDto employeeDto)
    {
        if (Id == null)
        {
            var result = await Http.PostAsJsonAsync<EmployeeDto>("api/Employees", employeeDto);
            result.EnsureSuccessStatusCode();
        }
        else
        {
            var result = await Http.PutAsJsonAsync<EmployeeDto>($"api/Employees/{Id.Value}", employeeDto);
            result.EnsureSuccessStatusCode();
        }
        NavigationManager.NavigateTo("/edit-employees");
    }
}
